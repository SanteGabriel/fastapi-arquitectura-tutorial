#!/bin/bash

# üöÄ Setup Script para LLM Wrapper Web Microservicios - VERSI√ìN CORREGIDA
# Este script configura SOLO los microservicios que est√°n realmente implementados

set -e  # Salir si hay errores

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir con colores
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Verificar que estamos en el directorio correcto
if [ ! -d "microservices" ]; then
    print_error "No se encontr√≥ el directorio 'microservices'. Ejecuta este script desde la ra√≠z del proyecto."
    exit 1
fi

print_status "üöÄ Configurando microservicios LLM Wrapper Web..."

# ‚úÖ SERVICIOS IMPLEMENTADOS (tienen main.py)
implemented_services=("auth-service" "chat-service")

# ‚è≥ SERVICIOS PENDIENTES (solo README + requirements.txt)
pending_services=("payment-service" "history-service" "cache-service")

# Verificar que Python est√° instalado
if ! command -v python3 &> /dev/null; then
    print_error "Python3 no est√° instalado. Por favor instala Python 3.8+ primero."
    exit 1
fi

python_version=$(python3 --version | cut -d' ' -f2)
print_status "Usando Python $python_version"

# Configurar servicios IMPLEMENTADOS
echo ""
print_status "üì¶ Configurando servicios IMPLEMENTADOS..."

for service in "${implemented_services[@]}"
do
    print_status "‚úÖ Configurando $service (IMPLEMENTADO)..."
    
    # Verificar que el directorio y main.py existen
    if [ ! -d "microservices/$service" ] || [ ! -f "microservices/$service/main.py" ]; then
        print_warning "‚ùå $service no est√° completamente implementado. Saltando..."
        continue
    fi
    
    # Verificar que requirements.txt existe
    if [ ! -f "microservices/$service/requirements.txt" ]; then
        print_warning "No se encontr√≥ requirements.txt en $service. Saltando..."
        continue
    fi
    
    # Cambiar al directorio del servicio
    cd "microservices/$service"
    
    # Verificar si ya tiene entorno virtual configurado
    if [ -d ".venv" ] && [ -f ".venv/pyvenv.cfg" ]; then
        print_status "üîÑ Entorno virtual ya existe en $service. Actualizando dependencias..."
        source .venv/bin/activate
        pip install --upgrade pip > /dev/null 2>&1
        pip install -r requirements.txt > /dev/null 2>&1
        deactivate
    else
        # Crear nuevo entorno virtual
        print_status "üÜï Creando entorno virtual para $service..."
        python3 -m venv .venv
        
        # Activar entorno virtual
        source .venv/bin/activate
        
        # Actualizar pip
        print_status "‚¨ÜÔ∏è Actualizando pip en $service..."
        pip install --upgrade pip > /dev/null 2>&1
        
        # Instalar dependencias
        print_status "üìö Instalando dependencias para $service..."
        pip install -r requirements.txt
        
        deactivate
    fi
    
    # Verificar instalaci√≥n
    source .venv/bin/activate
    installed_packages=$(pip list --format=freeze | wc -l)
    deactivate
    
    print_success "‚úÖ $service configurado - $installed_packages paquetes instalados"
    
    # Volver al directorio ra√≠z
    cd ../..
done

# Mostrar estado de servicios PENDIENTES
echo ""
print_status "‚è≥ Estado de servicios PENDIENTES..."

for service in "${pending_services[@]}"
do
    if [ -d "microservices/$service" ]; then
        if [ -f "microservices/$service/main.py" ]; then
            print_success "üéâ $service ¬°YA IMPLEMENTADO! (mover a lista de implementados)"
        else
            print_warning "üìã $service - Solo documentaci√≥n (falta implementar main.py)"
        fi
    else
        print_error "‚ùå $service - Directorio no existe"
    fi
done

# Configurar shared utilities si es necesario
if [ -d "shared" ]; then
    echo ""
    print_status "üìö Verificando shared utilities..."
    
    # Crear __init__.py si no existe
    if [ ! -f "shared/__init__.py" ]; then
        touch shared/__init__.py
        print_status "‚úÖ Creado shared/__init__.py"
    fi
    
    # Verificar si ya tiene setup.py
    if [ ! -f "shared/setup.py" ]; then
        print_status "üìÑ Creando shared/setup.py..."
        cat > shared/setup.py << EOF
from setuptools import setup, find_packages

setup(
    name="llm-wrapper-shared",
    version="1.0.0",
    packages=find_packages(),
    install_requires=[
        "fastapi>=0.104.1",
        "pydantic>=2.5.0",
        "PyJWT>=2.8.0",
        "motor>=3.3.2",
        "redis>=5.0.1"
    ],
    description="Shared utilities for LLM Wrapper microservices",
    author="Your Name",
    python_requires=">=3.8",
)
EOF
        print_success "‚úÖ Creado shared/setup.py"
    else
        print_status "‚úÖ shared/setup.py ya existe"
    fi
    
    print_success "‚úÖ Shared utilities verificado"
fi

# Verificar archivos .env.example existentes (no sobreescribir)
echo ""
print_status "üìÑ Verificando archivos .env.example..."

for service in "${implemented_services[@]}"
do
    if [ -f "microservices/$service/.env.example" ]; then
        print_success "‚úÖ .env.example existe en $service"
    else
        print_warning "‚ö†Ô∏è  .env.example falta en $service (usar setup_env_files.sh)"
    fi
done

# Crear script de desarrollo mejorado
echo ""
print_status "üõ†Ô∏è Creando script de desarrollo..."

cat > start_services_implemented.sh << 'EOF'
#!/bin/bash

# Script para iniciar SOLO los servicios IMPLEMENTADOS

# Servicios implementados con sus puertos
services=(
    "auth-service:8001"
    "chat-service:8002"
)

echo "üöÄ Iniciando microservicios implementados..."
echo ""

for service_port in "${services[@]}"
do
    service=${service_port%:*}
    port=${service_port#*:}
    
    echo "üì¶ Verificando $service..."
    
    # Verificar si el servicio existe y est√° implementado
    if [ ! -f "microservices/$service/main.py" ]; then
        echo "‚ùå $service no est√° implementado (falta main.py)"
        continue
    fi
    
    if [ ! -d "microservices/$service/.venv" ]; then
        echo "‚ùå $service no tiene entorno virtual configurado"
        echo "   üí° Ejecuta: ./setup_all_services_fixed.sh"
        continue
    fi
    
    if [ ! -f "microservices/$service/.env" ]; then
        echo "‚ö†Ô∏è  $service no tiene archivo .env"
        echo "   üí° Ejecuta: ./setup_env_files.sh"
        echo "   üîß O copia: cp microservices/$service/.env.example microservices/$service/.env"
    fi
    
    echo "‚úÖ Iniciando $service en puerto $port..."
    
    # Iniciar en nueva terminal (macOS)
    if [[ "$OSTYPE" == "darwin"* ]]; then
        osascript -e "tell app \"Terminal\" to do script \"cd $(pwd)/microservices/$service && source .venv/bin/activate && uvicorn main:app --reload --port $port\""
    else
        # Para Linux, usar gnome-terminal o xterm
        gnome-terminal -- bash -c "cd $(pwd)/microservices/$service && source .venv/bin/activate && uvicorn main:app --reload --port $port; exec bash" 2>/dev/null || \
        xterm -e "cd $(pwd)/microservices/$service && source .venv/bin/activate && uvicorn main:app --reload --port $port; bash" &
    fi
done

echo ""
echo "‚úÖ Servicios iniciados en terminales separadas!"
echo ""
echo "üìç URLs de servicios implementados:"
echo "   ‚Ä¢ Auth Service:  http://localhost:8001"
echo "   ‚Ä¢ Chat Service:  http://localhost:8002"
echo ""
echo "üìñ Documentaci√≥n interactiva:"
echo "   ‚Ä¢ Auth API:  http://localhost:8001/docs"
echo "   ‚Ä¢ Chat API:  http://localhost:8002/docs"
echo ""
echo "‚è≥ Servicios pendientes de implementaci√≥n:"
echo "   ‚Ä¢ Payment Service: http://localhost:8003 (pendiente)"
echo "   ‚Ä¢ History Service: http://localhost:8004 (pendiente)"
echo "   ‚Ä¢ Cache Service:   http://localhost:6379 (pendiente)"
echo ""
echo "üí° Para implementar m√°s servicios, revisa los READMEs en cada directorio."
EOF

chmod +x start_services_implemented.sh

print_success "‚úÖ Script start_services_implemented.sh creado"

# Resumen final
echo ""
print_success "üéâ ¬°Configuraci√≥n completada!"
echo ""
print_status "üìä Resumen del estado actual:"
echo "   ‚úÖ IMPLEMENTADOS y configurados:"
for service in "${implemented_services[@]}"
do
    echo "      ‚Ä¢ $service"
done
echo ""
echo "   ‚è≥ PENDIENTES de implementaci√≥n:"
for service in "${pending_services[@]}"
do
    echo "      ‚Ä¢ $service (solo README + requirements.txt)"
done
echo ""
print_status "üöÄ Pr√≥ximos pasos:"
echo "   1. Configurar variables de entorno:"
echo "      ./setup_env_files.sh  # o ./setup_env_smart.sh"
echo ""
echo "   2. Iniciar servicios implementados:"
echo "      ./start_services_implemented.sh"
echo ""
echo "   3. Probar APIs implementadas:"
echo "      curl http://localhost:8001/health  # Auth Service"
echo "      curl http://localhost:8002/health  # Chat Service"
echo ""
echo "   4. Para implementar servicios pendientes:"
echo "      ‚Ä¢ Revisar microservices/[service]/README.md"
echo "      ‚Ä¢ Crear main.py bas√°ndose en la documentaci√≥n"
echo ""
print_status "üí° Tip: Usa start_services_implemented.sh en lugar de start_dev.sh"
print_success "üî• ¬°Todo listo para desarrollo con servicios implementados!"
